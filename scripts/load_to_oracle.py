import pandas as pd
import oracledb

# === Configuration ===
user = "system"
password = "oracle"
dsn = "localhost/XEPDB1"  # Update if different

# === Connect to Oracle ===
conn = oracledb.connect(user=user, password=password, dsn=dsn)
cur = conn.cursor()

# === Create banks table if not exists ===
cur.execute("""
BEGIN
  EXECUTE IMMEDIATE '
    CREATE TABLE banks (
      id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      name VARCHAR2(100) UNIQUE NOT NULL
    )';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE; END IF;
END;
""")

# === Create reviews table if not exists ===
cur.execute("""
BEGIN
  EXECUTE IMMEDIATE '
    CREATE TABLE reviews (
      id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      review_text CLOB,
      rating NUMBER,
      review_date DATE,
      bank_id NUMBER REFERENCES banks(id),
      sentiment VARCHAR2(20),
      source VARCHAR2(50)
    )';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE; END IF;
END;
""")

# === Get or Insert Banks ===
banks = ["CBE", "BOA", "Dashen"]
bank_ids = {}

for bank in banks:
    cur.execute("SELECT id FROM banks WHERE name = :1", [bank])
    result = cur.fetchone()
    if result:
        bank_ids[bank] = result[0]
    else:
        bank_id_var = cur.var(int)
        cur.execute("INSERT INTO banks (name) VALUES (:1) RETURNING id INTO :2", [bank, bank_id_var])
        bank_ids[bank] = bank_id_var.getvalue()

# === Load CSV and Insert Reviews ===
df = pd.read_csv("outputs/reviews_with_sentiment.csv")

inserted = 0
for _, row in df.iterrows():
    try:
        cur.execute("""
            INSERT INTO reviews (
                review_text, rating, review_date, bank_id, sentiment, source
            ) VALUES (
                :1, :2, TO_DATE(:3, 'YYYY-MM-DD'), :4, :5, :6
            )
        """, [
            row["review"],
            int(row["rating"]),
            row["date"],
            bank_ids[row["bank"]],
            row["sentiment"],
            row["source"]
        ])
        inserted += 1
    except Exception as e:
        print(f"⚠️ Skipped row due to: {e}")

conn.commit()
print(f"✅ Successfully inserted {inserted} rows.")
